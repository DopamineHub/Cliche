[{"model": "cliche_builders.ClicheBuildTarget", "pk": "Django-3", "fields": {"requirements": {"Django": "3.2.3", "PyMySQL": "1.0.2", "marshmallow": "3.20.1", "redis": "3.5.3", "requests": "2.25.1"}, "description": "### Django 3.X Web Framework (Python)\n", "code": "import os\nimport pathlib\nimport re\n\nglobal project\n\ntarget = 'Django-3'\n\nfiles = {\n    'manage.py': '\\n'.join([\n        '#!/usr/bin/env python',\n        '\"\"\"Django\\'s command-line utility for administrative tasks.\"\"\"',\n        'import os',\n        'import sys',\n        '',\n        '',\n        'def main():',\n        '    \"\"\"Run administrative tasks.\"\"\"',\n        '    os.environ.setdefault(\\'DJANGO_SETTINGS_MODULE\\', \\'settings\\')',\n        '    try:',\n        '        from django.core.management import execute_from_command_line',\n        '    except ImportError as exc:',\n        '        raise ImportError(',\n        '           \"Couldn\\'t import Django. Are you sure it\\'s installed and \"',\n        '           \"available on your PYTHONPATH environment variable? Did you \"',\n        '           \"forget to activate a virtual environment?\"',\n        '        ) from exc',\n        '    execute_from_command_line(sys.argv)',\n        '',\n        '',\n        'if __name__ == \\'__main__\\':',\n        '    main()',\n        '',\n    ]),\n    'asgi.py': '\\n'.join([\n        '\"\"\"',\n        'ASGI config for project.',\n        '',\n        'For more information on this file, see',\n        'https://docs.djangoproject.com/en/3.2/howto/deployment/asgi/',\n        '\"\"\"',\n        '',\n        'import os',\n        '',\n        'from django.core.asgi import get_asgi_application',\n        '',\n        'os.environ.setdefault(\\'DJANGO_SETTINGS_MODULE\\', \\'settings\\')',\n        '',\n        'application = get_asgi_application()',\n        '',\n    ]),\n    'wsgi.py': '\\n'.join([\n        '\"\"\"',\n        'WSGI config for project.',\n        '',\n        'For more information on this file, see',\n        'https://docs.djangoproject.com/en/3.2/howto/deployment/wsgi/',\n        '\"\"\"',\n        '',\n        'import os',\n        '',\n        'from django.core.wsgi import get_wsgi_application',\n        '',\n        'os.environ.setdefault(\\'DJANGO_SETTINGS_MODULE\\', \\'settings\\')',\n        '',\n        'application = get_wsgi_application()',\n        '',\n    ])\n}\n\n\ndef camel_to_snake(name):\n    name = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', name)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', name).lower()\n\n\ndef build_proj(proj):\n    # create repo dir ------------------------------------------\n    proj_dir = os.path.join(proj['directory'], proj['name'])\n    proj_dir = pathlib.Path(proj_dir)\n    proj_dir = proj_dir.resolve()\n    proj_dir.mkdir(parents=True, exist_ok=True)\n\n    # create requirements --------------------------------------\n    proj_requirements = proj['requirements']\n    with open(proj_dir / 'requirements.txt', 'w') as f:\n        assert isinstance(proj_requirements, dict)\n        for name, version in proj_requirements.items():\n            f.write(f'{name}=={version}\\n')\n\n    # create manage.py -----------------------------------------\n    with open(proj_dir / 'manage.py', 'w') as f:\n        f.write(files['manage.py'])\n\n    # create apps dirs -----------------------------------------\n    apps_dir = proj_dir / 'apps'\n    apps_dir.mkdir(parents=True, exist_ok=True)\n    (apps_dir / '__init__.py').touch(exist_ok=True)\n\n    proj_scripts = proj['scripts']\n    build_script(apps_dir / 'scripts.py', proj_scripts)\n\n    proj_apps = proj['apps']\n    for app in proj_apps:\n        # create app dir\n        app_dir = apps_dir / app.name\n        app_dir.mkdir(parents=True, exist_ok=True)\n        (app_dir / '__init__.py').touch(exist_ok=True)\n        build_app(app_dir, app, proj_scripts)\n\n    # create settings dir --------------------------------------\n    settings_dir = proj_dir / 'settings'\n    settings_dir.mkdir(parents=True, exist_ok=True)\n    # (settings_dir / '__init__.py').touch(exist_ok=True)\n\n    # create settings/__init__.py ------------------------------\n    proj_settings = proj['settings']\n    build_setting(\n        settings_dir / '__init__.py', proj_apps, proj_settings)\n    # create urls.py -------------------------------------------\n    build_setting_url(settings_dir / 'urls.py', proj_apps)\n\n    # create wsgi.py -------------------------------------------\n    with open(settings_dir / 'wsgi.py', 'w+') as f:\n        f.write(files['wsgi.py'])\n\n    # create asgi.py -------------------------------------------\n    with open(settings_dir / 'asgi.py', 'w+') as f:\n        f.write(files['asgi.py'])\n\n\ndef build_setting(path, apps, settings):\n    assert isinstance(settings, dict)\n    settings.setdefault(\n        'SECRET_KEY',\n        'django-insecure-b&tun9)kj=gb(eb+zgh4*8zf!=cxb0&b*de7a=@^600_h++690'\n    )\n    settings.setdefault('DEBUG', True)\n    settings.setdefault('LANGUAGE_CODE', 'en-us')\n    settings.setdefault('TIME_ZONE', 'UTC')\n    settings.setdefault('USE_I18N', True)\n    settings.setdefault('USE_L10N', True)\n    settings.setdefault('USE_TZ', True)\n    settings.setdefault('STATIC_URL', '/static/')\n    settings.setdefault('STATIC_ROOT', '.static/')\n    settings.setdefault('MEDIA_URL', '/media/')\n    settings.setdefault('MEDIA_ROOT', '.media/')\n\n    lines = [\n        'from pathlib import Path',\n        '',\n        '',\n        'BASE_DIR = Path(__file__).resolve().parent.parent',\n        '',\n        '',\n    ]\n\n    # write INSTALLED_APPS ----------------------------------\n    setting_installed_apps = settings.pop('INSTALLED_APPS', [])\n    assert isinstance(setting_installed_apps, list)\n    setting_installed_apps = set(setting_installed_apps)\n    setting_local_apps = [f'apps.{app.name}' for app in apps]\n    lines.append('INSTALLED_APPS = [')\n    lines.extend([\n        f'    \\'{name}\\',' for\n        name in setting_installed_apps.difference(setting_local_apps)\n    ])\n    lines.extend([\n        f'    \\'{name}\\',' for\n        name in setting_local_apps\n    ])\n    lines.extend([']', ''])\n\n    # write MIDDLEWARE --------------------------------------\n    setting_middleware = settings.pop('MIDDLEWARE', [\n        'django.middleware.security.SecurityMiddleware',\n        'django.contrib.sessions.middleware.SessionMiddleware',\n        'django.middleware.common.CommonMiddleware',\n        'django.middleware.csrf.CsrfViewMiddleware',\n        'django.contrib.auth.middleware.AuthenticationMiddleware',\n        'django.contrib.messages.middleware.MessageMiddleware',\n        'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    ])\n    assert isinstance(setting_middleware, list)\n    lines.append('MIDDLEWARE = [')\n    lines.extend([f'    \\'{name}\\',' for name in setting_middleware])\n    lines.extend([']', ''])\n\n    # write TEMPLATES ----------------------------------------\n    setting_templates = settings.pop('TEMPLATES', [{\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    }])\n    assert isinstance(setting_templates, list)\n    lines.extend([f'TEMPLATES = {setting_templates}', ''])\n\n    # write ROOT_URLCONF -------------------------------------\n    settings.pop('ROOT_URLCONF', None)  # can not change ROOT_URLCONF\n    lines.extend(['ROOT_URLCONF = \\'settings.urls\\'', ''])\n\n    # write WSGI_APPLICATION ---------------------------------\n    settings.pop('WSGI_APPLICATION', None)  # can not change WSGI_APPLICATION\n    lines.extend(['WSGI_APPLICATION = \\'settings.wsgi.application\\'', ''])\n\n    # write DATABASES ----------------------------------------\n    setting_databases = settings.pop('DATABASES', {\n        'default': {\n            'ATOMIC_REQUESTS': True,\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': 'db.sqlite3',\n        }\n    })\n    assert isinstance(setting_databases, dict)\n    lines.extend([f'DATABASES = {setting_databases}', ''])\n\n    for name, value in settings.items():\n        value = f'\\'{value}\\'' if isinstance(value, str) else str(value)\n        lines.extend([f'{name} = {value}', ''])\n\n    with open(path, 'w') as f:\n        f.write('\\n'.join(lines))\n\n\ndef build_setting_url(path, apps):\n    lines = [\n        'from django.urls import include, path',\n        '',\n        '',\n        'urlpatterns = [',\n    ]\n    lines.extend([\n        f'    path(\\'{app.path}\\', '\n        f'include(\\'apps.{app.name}.urls\\')),'\n        for app in apps\n    ])\n    lines.extend([']', ''])\n\n    with open(path, 'w') as f:\n        f.write('\\n'.join(lines))\n\n\ndef build_script(path, scripts):\n    lines = []\n    line_imports = set()\n    for script in scripts:\n        for v, m in script.imports.items():\n            line_imports.add(f'from {m} import {v}')\n    line_imports = list(line_imports)\n    line_imports.sort()\n\n    # add imports lines\n    lines.extend(line_imports)\n\n    for script in scripts:\n        script_params = ', '.join(\n            f'{k}: {v}' for k, v in script.parameters.items())\n        script_define = f'def {script.name}({script_params}):'\n        lines.extend([\n            '',\n            '',\n            script_define,\n            f'    \"\"\" {script.description} \"\"\"'\n        ])\n        lines.extend([\n            f'    {ln}' for ln in script.code.split('\\n')\n        ])\n\n    lines.append('')\n\n    with open(path, 'w') as f:\n        f.write('\\n'.join(lines))\n\n\ndef build_app(path, app, scripts):\n    # build migration ------------------------------------------\n    migration_dir = path / 'migrations'\n    migration_dir.mkdir(parents=True, exist_ok=True)\n    (migration_dir / '__init__.py').touch(exist_ok=True)\n\n    # build app config -----------------------------------------\n    build_app_config(path / 'apps.py', app)\n\n    # build admin ----------------------------------------------\n    build_app_admin(path / 'admin.py', app)\n\n    # build models ---------------------------------------------\n    build_app_model(path / 'models.py', app)\n\n    # build schemas --------------------------------------------\n    build_app_schema(path / 'schemas.py', app)\n\n    # build scripts --------------------------------------------\n    build_app_script(path / 'scripts.py', app)\n\n    # build views ----------------------------------------------\n    build_app_view(path / 'views.py', app, scripts)\n\n    # build urls -----------------------------------------------\n    build_app_url(path / 'urls.py', app)\n\n\ndef build_app_config(path, app):\n    lines = [\n        'from django.apps import AppConfig as _AppConfig',\n        '',\n        '',\n        'class AppConfig(_AppConfig):',\n        '    default_auto_field = \\'django.db.models.BigAutoField\\'',\n        f'    name = \\'apps.{app.name}\\'',\n        f'    label = \\'{app.name}\\'',\n        '',\n    ]\n\n    with open(path, 'w') as f:\n        f.write('\\n'.join(lines))\n\n\ndef build_app_admin(path, app):\n    models = list(app.models.all())\n    lines = [\n        'from django.contrib import admin',\n    ]\n    lines.extend([\n        f'from .models import {model.name}' for\n        model in models\n    ])\n    lines.extend(['', ''])\n    lines.extend([\n        f'admin.site.register({model.name})' for\n        model in models\n    ])\n    lines.append('')\n\n    with open(path, 'w') as f:\n        f.write('\\n'.join(lines))\n\n\ndef build_app_model(path, app):\n    models = list(app.models.all())\n    lines = [\n        'from django.db import models',\n    ]\n\n    for model in models:\n        lines.extend([\n            '',\n            '',\n            f'class {model.name}(models.Model):',\n            f'    \"\"\" {model.description} \"\"\"',\n        ])\n        model_fields = list(\n            model.fields.select_related(\n                'type',\n                'model_foreign',\n                'model_foreign__app',\n            ).all()\n        )\n        for field in model_fields:\n            field_attrs = {\n                name: v['default'] for name, v in\n                field.type.attributes.items()\n            }\n            field_attrs.update(field.attributes)\n            lines.extend([\n                '',\n                f'    # {field.description}',\n                f'    {field.name} = models.{field.type_id}Field(',\n            ])\n            if field.type_id == 'ForeignKey':\n                model_foreign = field.model_foreign\n                lines.append(\n                    f'        \\'{model_foreign.app.name}:'\n                    f'{model_foreign.name}\\','\n                )\n\n            lines.extend([\n                f'        {k}={v},'\n                for k, v in field_attrs.items()\n            ])\n            lines.extend([\n                '    )',\n            ])\n\n        model_attrs = {\n            k: str(v)\n            for k, v in model.attributes.items()\n        }\n        model_attrs.setdefault(\n            'db_table', f'\\'{camel_to_snake(model.name)}\\'')\n        lines.extend([\n            '',\n            '    class Meta:',\n        ])\n        lines.extend([\n            f'        {k} = {v}' for\n            k, v in model_attrs.items()\n        ])\n\n    lines.append('')\n\n    with open(path, 'w') as f:\n        f.write('\\n'.join(lines))\n\n\ndef build_app_schema(path, app):\n    field_attrs_mapping = {\n        'source': 'data_key',\n        'null': 'allow_none',\n        'read_only': 'dump_only',\n        'write_only': 'load_only',\n        'default': 'missing',\n    }\n    field_attrs_ex_mapping = {\n        'max_value': {'validate.Range': 'max'},\n        'min_value': {'validate.Range': 'max'},\n        'max_length': {'validate.Length': 'max'},\n        'min_length': {'validate.Length': 'min'},\n    }\n\n    schemas = list(app.schemas.all())\n    lines = [\n        'from marshmallow import Schema, fields, validate',\n    ]\n\n    for schema in schemas:\n        lines.extend([\n            '',\n            '',\n            f'class {schema.name}(Schema):',\n            f'    \"\"\" {schema.description} \"\"\"',\n        ])\n\n        schema_fields = list(\n            schema.fields.select_related(\n                'type',\n                'schema_nested',\n                'schema_nested__app',\n            ).all()\n        )\n        for field in schema_fields:\n            field_attrs_origin = {\n                name: v['default'] for name, v in\n                field.type.attributes.items()\n            }\n            field_attrs_origin.update(field.attributes)\n            field_attrs = {\n                field_attrs_mapping.get(k) or k: v\n                for k, v in field_attrs_origin.items()\n                if k not in field_attrs_ex_mapping\n            }\n            field_attrs_ex = {}\n            for k, v in field_attrs_origin.items():\n                if v is None:\n                    continue\n\n                k_ = field_attrs_ex_mapping.get(k)\n                if not isinstance(k_, dict):\n                    continue\n\n                for k_k, k_v in k_.items():\n                    field_attrs_ex.setdefault(\n                        k_k, {}).update({k_v: v})\n\n            lines.extend([\n                '',\n                f'    # {field.description}',\n                f'    {field.name} = fields.{field.type_id}(',\n            ])\n            if field.type_id == 'Nested':\n                schema_nested = field.schema_nested\n                lines.append(\n                    f'        \\'{schema_nested.name}\\','\n                )\n            lines.extend([\n                f'        {k}={v},'\n                for k, v in field_attrs.items()\n            ])\n            if field_attrs_ex:\n                lines.append('        validate=[')\n                for v_func, v_values in field_attrs_ex.items():\n                    lines.append(f'            {v_func}(')\n                    for k, v in v_values.items():\n                        lines.append(f'                {k}={v},')\n                    lines.append('            ),')\n                lines.append('        ],')\n            lines.extend([\n                '    )',\n            ])\n\n    lines.append('')\n\n    with open(path, 'w') as f:\n        f.write('\\n'.join(lines))\n\n\ndef build_app_script(path, app):\n    build_script(path, list(app.scripts.all()))\n\n\ndef build_app_view(path, app, scripts):\n    views = list(app.views.all())\n    schemas = list(app.schemas.all())\n    scripts_local = list(app.scripts.all())\n    lines = [\n        'from django.apps import apps',\n        'from django.core import exceptions',\n        'from django import http',\n        'from django import shortcuts',\n        'from django import views',\n        '',\n    ]\n    lines.extend([\n        f'from ..scripts import {s.name}' for\n        s in scripts\n    ])\n    lines.extend([\n        f'from .scripts import {s.name}' for\n        s in scripts_local\n    ])\n    lines.extend([\n        f'from .schemas import {s.name}' for\n        s in schemas\n    ])\n    for view in views:\n        lines.extend([\n            '',\n            '',\n            f'class {view.name}(views.View):',\n            f'    \"\"\" {view.description} \"\"\"',\n        ])\n        for method in view.methods.select_related(\n                'model',\n                'model__app',\n                'filter_schema',\n                'input_schema',\n                'output_schema',\n        ).all():\n            method_params = 'self, request, *args, **kwargs'\n            method_define = f'def {method.type.lower()}({method_params}):'\n            method_options = {\n                'model': (\n                    f'apps.get_model('\n                    f'\\'{method.model.app.name}.{method.model.name}\\''\n                    f')' if method.model else 'None'\n                ),\n                'filter_schema': (\n                    f'{method.filter_schema.name}()'\n                    if method.filter_schema else 'None'\n                ),\n                'input_schema': (\n                    f'{method.input_schema.name}()'\n                    if method.input_schema else 'None'\n                ),\n                'output_schema': (\n                    f'{method.output_schema.name}()'\n                    if method.output_schema else 'None'\n                ),\n                'path_args': 'kwargs',\n            }\n            lines.extend([\n                '',\n                f'    {method_define}',\n                f'        \"\"\" {method.description} \"\"\"',\n            ])\n            scripts = list(method.scripts.filter(\n                target=target\n            ).select_related('script').all())\n            for script in scripts:\n                script_name = script.script.name\n                lines.append(\n                    f'        return {script_name}(request, dict('\n                )\n                lines.extend([\n                    f'            {k}={v},'\n                    for k, v in method_options.items()\n                ])\n                lines.append('        ))')\n\n            if not scripts:\n                lines.append(\n                    '        raise exceptions.RequestAborted('\n                    '\\'not implemented yet\\')'\n                )\n\n    lines.append('')\n\n    with open(path, 'w') as f:\n        f.write('\\n'.join(lines))\n\n\ndef build_app_url(path, app):\n    views = list(app.views.all())\n    lines = [\n        'from django.urls import path',\n    ]\n    lines.extend([\n        f'from .views import {view.name}'\n        for view in views\n    ])\n    lines.extend([\n        '',\n        '',\n        f'app_name = \\'{app.name}\\'',\n        '',\n        '',\n        'urlpatterns = [',\n    ])\n    lines.extend([\n        f'    path(\\'{view.path}\\', {view.name}.as_view()),'\n        for view in views\n    ])\n    lines.extend([']', ''])\n\n    with open(path, 'w') as f:\n        f.write('\\n'.join(lines))\n\n\n# start build project\nbuild_proj(project)  # noqa\n"}}, {"model": "cliche_scripts.ClicheScript", "pk": null, "fields": {"uuid": "0054630a-ac47-11ee-b0c9-ba4b1618bd02", "target": "Django-3", "app": null, "name": "model_view_create", "description": "create model instance", "imports": {"HTTPStatus": "http", "HttpRequest": "django.http", "JsonResponse": "django.http", "MultipleObjectsReturned": "django.core.exceptions", "ObjectDoesNotExist": "django.core.exceptions", "DatabaseError": "django.db", "ModelBase": "django.db.models.base", "Schema": "marshmallow", "ValidationError": "marshmallow.exceptions"}, "parameters": {"request": "HttpRequest", "options": "dict"}, "code": "model = options.get('model')\nif not isinstance(model, ModelBase):\n    raise AssertionError('model not provided')\nschema = options.get('intput_schema')\nif not isinstance(schema, Schema):\n    raise AssertionError('input schema not provided')\ntry:\n    input_args = schema.loads(request.body)\nexcept ValidationError:\n    return JsonResponse({\n        'error': 'Invalid Data'}, status=HTTPStatus.BAD_REQUEST)\ntry:\n    model_instance = model(**input_args)\n    model_instance.save()\nexcept DatabaseError:\n    return JsonResponse({\n        'error': 'Failed to Create'}, status=HTTPStatus.CONFLICT)\nschema = options.get('output_schema')\nif not isinstance(schema, Schema):\n    raise AssertionError('output schema not provided')\nreturn JsonResponse(schema.dumps(model_instance))", "created_time": "2024-02-02T08:58:05.566349+00:00", "modified_time": "2024-02-02T08:58:05.566349+00:00"}}, {"model": "cliche_scripts.ClicheScript", "pk": null, "fields": {"uuid": "01ff390a-ac47-11ee-b0c9-ba4b1618bd02", "target": "Django-3", "app": null, "name": "model_view_update", "description": "update model instance", "imports": {"HTTPStatus": "http", "HttpRequest": "django.http", "JsonResponse": "django.http", "MultipleObjectsReturned": "django.core.exceptions", "ObjectDoesNotExist": "django.core.exceptions", "DatabaseError": "django.db", "ModelBase": "django.db.models.base", "Schema": "marshmallow", "ValidationError": "marshmallow.exceptions"}, "parameters": {"request": "HttpRequest", "options": "dict"}, "code": "return JsonResponse({})", "created_time": "2024-02-02T08:58:05.566349+00:00", "modified_time": "2024-02-02T08:58:05.566349+00:00"}}, {"model": "cliche_scripts.ClicheScript", "pk": null, "fields": {"uuid": "025485e0-ac47-11ee-b0c9-ba4b1618bd02", "target": "Django-3", "app": null, "name": "model_view_list", "description": "list model instance", "imports": {"HTTPStatus": "http", "HttpRequest": "django.http", "JsonResponse": "django.http", "MultipleObjectsReturned": "django.core.exceptions", "ObjectDoesNotExist": "django.core.exceptions", "DatabaseError": "django.db", "ModelBase": "django.db.models.base", "Schema": "marshmallow", "ValidationError": "marshmallow.exceptions"}, "parameters": {"request": "HttpRequest", "options": "dict"}, "code": "model = options.get('model')\nif not isinstance(model, ModelBase):\n    raise AssertionError('model not provided')\narg_offset = options.get('offset') or 0\narg_limit = options.get('limit') or 100\nmodel_qs = model.objects.all()\nschema = options.get('filter_schema')\nif isinstance(schema, Schema):\n    filter_args = schema.load({\n        k: v for k, v in request.GET.items()})\n    arg_offset = filter_args.pop('offset', arg_offset)\n    arg_limit = filter_args.pop('limit', arg_limit)\n    model_qs = model_qs.filter(filter_args)\nschema = options.get('output_schema')\nif not isinstance(schema, Schema):\n    raise AssertionError('output schema not provided')\nreturn JsonResponse({\n    'total': model_qs.count(),\n    'results': schema.dumps(\n        model_qs.all()[arg_offset: arg_limit],\n        many=True,\n    )\n})", "created_time": "2024-02-02T08:58:05.566349+00:00", "modified_time": "2024-02-02T08:58:05.566349+00:00"}}, {"model": "cliche_scripts.ClicheScript", "pk": null, "fields": {"uuid": "02bef150-ac47-11ee-b0c9-ba4b1618bd02", "target": "Django-3", "app": null, "name": "model_view_retrieve", "description": "retrieve model instance", "imports": {"HTTPStatus": "http", "HttpRequest": "django.http", "JsonResponse": "django.http", "MultipleObjectsReturned": "django.core.exceptions", "ObjectDoesNotExist": "django.core.exceptions", "DatabaseError": "django.db", "ModelBase": "django.db.models.base", "Schema": "marshmallow", "ValidationError": "marshmallow.exceptions"}, "parameters": {"request": "HttpRequest", "options": "dict"}, "code": "model = options.get('model')\nif not isinstance(model, ModelBase):\n    raise AssertionError('model not provided')\nmodel_qs = model.objects.all()\nschema = options.get('filter_schema')\nif isinstance(schema, Schema):\n    model_qs = model_qs.filter(schema.load({\n        k: v for k, v in request.GET.items()}))\nargs = options.get('path_args')\nif not isinstance(args, dict):\n    raise AssertionError('path args not provided')\ntry:\n    model_instance = model_qs.filter(args).get()\nexcept (\n        ObjectDoesNotExist,\n        MultipleObjectsReturned,\n):\n    return JsonResponse({\n        'error': 'NotFound'}, status=HTTPStatus.NOT_FOUND)\nschema = options.get('output_schema')\nif not isinstance(schema, Schema):\n    raise AssertionError('output schema not provided')\nreturn JsonResponse(schema.dumps(model_instance))", "created_time": "2024-02-02T08:58:05.566349+00:00", "modified_time": "2024-02-02T08:58:05.566349+00:00"}}, {"model": "cliche_scripts.ClicheScript", "pk": null, "fields": {"uuid": "1a791f1e-ac47-11ee-b0c9-ba4b1618bd02", "target": "Django-3", "app": null, "name": "model_view_destroy", "description": "destroy model instance", "imports": {"HTTPStatus": "http", "HttpRequest": "django.http", "JsonResponse": "django.http", "MultipleObjectsReturned": "django.core.exceptions", "ObjectDoesNotExist": "django.core.exceptions", "DatabaseError": "django.db", "ModelBase": "django.db.models.base", "Schema": "marshmallow", "ValidationError": "marshmallow.exceptions"}, "parameters": {"request": "HttpRequest", "options": "dict"}, "code": "return JsonResponse({})", "created_time": "2024-02-02T08:58:05.566349+00:00", "modified_time": "2024-02-02T08:58:05.566349+00:00"}}]